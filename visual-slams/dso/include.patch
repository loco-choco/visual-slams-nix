diff --git a/src/FullSystem/FullSystemOptimize.cpp b/src/FullSystem/FullSystemOptimize.cpp
index 74af9c1..b76f5df 100644
--- a/src/FullSystem/FullSystemOptimize.cpp
+++ b/src/FullSystem/FullSystemOptimize.cpp
@@ -151,7 +151,7 @@ Vec3 FullSystem::linearizeAll(bool fixLinearization)
 
 	if(multiThreading)
 	{
-		treadReduce.reduce(boost::bind(&FullSystem::linearizeAll_Reductor, this, fixLinearization, toRemove, _1, _2, _3, _4), 0, activeResiduals.size(), 0);
+		treadReduce.reduce(boost::bind(&FullSystem::linearizeAll_Reductor, this, fixLinearization, toRemove, boost::placeholders::_1, boost::placeholders::_2, boost::placeholders::_3, boost::placeholders::_4), 0, activeResiduals.size(), 0);
 		lastEnergyP = treadReduce.stats[0];
 	}
 	else
diff --git a/src/util/IndexThreadReduce.h b/src/util/IndexThreadReduce.h
index 683a8d7..b5eb108 100644
--- a/src/util/IndexThreadReduce.h
+++ b/src/util/IndexThreadReduce.h
@@ -25,7 +25,8 @@
 
 #pragma once
 #include "util/settings.h"
-#include "boost/thread.hpp"
+#include <boost/thread.hpp>
+#include <boost/bind/bind.hpp>
 #include <stdio.h>
 #include <iostream>
 
@@ -46,7 +47,7 @@ public:
 		nextIndex = 0;
 		maxIndex = 0;
 		stepSize = 1;
-		callPerIndex = boost::bind(&IndexThreadReduce::callPerIndexDefault, this, _1, _2, _3, _4);
+		callPerIndex = boost::bind(&IndexThreadReduce::callPerIndexDefault, this, boost::placeholders::_1, boost::placeholders::_2, boost::placeholders::_3, boost::placeholders::_4);
 
 		running = true;
 		for(int i=0;i<NUM_THREADS;i++)
@@ -131,7 +132,7 @@ public:
 
 		nextIndex = 0;
 		maxIndex = 0;
-		this->callPerIndex = boost::bind(&IndexThreadReduce::callPerIndexDefault, this, _1, _2, _3, _4);
+		this->callPerIndex = boost::bind(&IndexThreadReduce::callPerIndexDefault, this, boost::placeholders::_1, boost::placeholders::_2, boost::placeholders::_3, boost::placeholders::_4);
 
 		//printf("reduce done (all threads finished)\n");
 	}
