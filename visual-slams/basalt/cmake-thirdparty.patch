diff --git a/thirdparty/CMakeLists.txt b/thirdparty/CMakeLists.txt
index 5beecd9..f53173c 100644
--- a/thirdparty/CMakeLists.txt
+++ b/thirdparty/CMakeLists.txt
@@ -28,35 +28,35 @@ set(EIGEN_INCLUDE_DIRS "${EIGEN3_INCLUDE_DIR}")
 
 
 # Hack to disable march=native in opengv
-macro(add_definitions)
-  if(NOT ${ARGV0} STREQUAL "-march=native")
-    _add_definitions(${ARGN})
-  endif()
-endmacro()
-add_subdirectory(opengv EXCLUDE_FROM_ALL)
+#macro(add_definitions)
+#  if(NOT ${ARGV0} STREQUAL "-march=native")
+#    _add_definitions(${ARGN})
+#  endif()
+#endmacro()
+#add_subdirectory(opengv EXCLUDE_FROM_ALL)
 
 # Hack to disable CPack in Pangolin.
-macro(include)
-  if(NOT ${ARGV0} STREQUAL "CPack")
-    _include(${ARGN})
-  endif()
-endmacro()
-add_subdirectory(Pangolin EXCLUDE_FROM_ALL)
+#macro(include)
+#  if(NOT ${ARGV0} STREQUAL "CPack")
+#    _include(${ARGN})
+#  endif()
+#endmacro()
+#add_subdirectory(Pangolin EXCLUDE_FROM_ALL)
 
 
 # fix aprilgrid
 target_compile_options(apriltag PRIVATE "-Wno-unused-private-field")
 
 # fix opengv: c++17 and debug postfix
-set_target_properties(opengv PROPERTIES
-  CXX_STANDARD 17
-  DEBUG_POSTFIX "")
+#set_target_properties(opengv PROPERTIES
+#  CXX_STANDARD 17
+#  DEBUG_POSTFIX "")
 
 # fix opengv: compile options (CMAKE_CXX_FLAGS is overwritten by Opengv)
-target_compile_options(opengv PRIVATE
-  -Wno-unused-private-field
-  ${BASALT_MARCH_FLAGS}
-  "SHELL:${BASALT_PASSED_CXX_FLAGS}")
+#target_compile_options(opengv PRIVATE
+#  -Wno-unused-private-field
+#  ${BASALT_MARCH_FLAGS}
+#  "SHELL:${BASALT_PASSED_CXX_FLAGS}")
 
 # TODO: enable once mpark issue is fixed upstream pangolin
 #set_target_properties(pangolin PROPERTIES
@@ -119,31 +119,31 @@ endif()
 
 # check here the directories for the pangolin and opengv targets, and
 # confirm that the eigen-related include dirs match.
-foreach(_target opengv pangolin)
-  get_target_property(_include_dirs ${_target} INTERFACE_INCLUDE_DIRECTORIES)
-  foreach(_dir IN LISTS _include_dirs)
-    if("${_dir}" MATCHES ".*/eigen3?(/unsupported)?$")
-      if(NOT _dir MATCHES "^${EIGEN3_INCLUDE_DIR}.*")
-      endif()
-    endif()
-  endforeach()
-endforeach()
+#foreach(_target opengv pangolin)
+#  get_target_property(_include_dirs ${_target} INTERFACE_INCLUDE_DIRECTORIES)
+#  foreach(_dir IN LISTS _include_dirs)
+#    if("${_dir}" MATCHES ".*/eigen3?(/unsupported)?$")
+#      if(NOT _dir MATCHES "^${EIGEN3_INCLUDE_DIR}.*")
+#      endif()
+#    endif()
+#  endforeach()
+#endforeach()
 
 # opengv and pangolin assume that eigen is found outside the source
 # directory and thus include it in INTERFACE_INCLUDE_DIRECTORIES,
 # which makes cmake complain that that property contains paths in the
 # source folder. Thus, we update the property to only include these
 # eigen paths in the "BUILD_INTERFACE" (not "INSTALL").
-if (EIGEN3_INCLUDE_DIR MATCHES "^${CMAKE_SOURCE_DIR}.*")
-  foreach(_target opengv pangolin)
-    get_target_property(_include_dirs ${_target} INTERFACE_INCLUDE_DIRECTORIES)
-    set(_include_dirs_new "")
-    foreach(_dir IN LISTS _include_dirs)
-      if(_dir MATCHES ".*/eigen(/unsupported)?$")
-        string(REGEX REPLACE "(^${CMAKE_SOURCE_DIR}.*$)" "$<BUILD_INTERFACE:\\1>" _dir "${_dir}")
-      endif()
-      list(APPEND _include_dirs_new "${_dir}")
-    endforeach()
-    set_target_properties(${_target} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${_include_dirs_new}")
-  endforeach()
-endif()
+#if (EIGEN3_INCLUDE_DIR MATCHES "^${CMAKE_SOURCE_DIR}.*")
+#  foreach(_target opengv pangolin)
+#    get_target_property(_include_dirs ${_target} INTERFACE_INCLUDE_DIRECTORIES)
+#    set(_include_dirs_new "")
+#    foreach(_dir IN LISTS _include_dirs)
+#      if(_dir MATCHES ".*/eigen(/unsupported)?$")
+#        string(REGEX REPLACE "(^${CMAKE_SOURCE_DIR}.*$)" "$<BUILD_INTERFACE:\\1>" _dir "${_dir}")
+#      endif()
+#      list(APPEND _include_dirs_new "${_dir}")
+#    endforeach()
+#    set_target_properties(${_target} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${_include_dirs_new}")
+#  endforeach()
+#endif()
